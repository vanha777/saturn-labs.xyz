/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Omer Bhatti (https://sketchfab.com/OmerBhatti)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/saturn-hd-textures-7f5432d978404732bf333f914243a540
Title: Saturn hd  textures
*/

import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { Mesh, MeshStandardMaterial, Group } from 'three/src/Three.js';

type GLTFResult = GLTF & {
  nodes: {
    Object_2: Mesh;
    Object_3: Mesh;
  };
  materials: {
    'Material.001': MeshStandardMaterial;
    None: MeshStandardMaterial;
  };
};

interface ModelProps extends React.PropsWithChildren<JSX.IntrinsicElements['group']> {}

export function Planet(props: ModelProps) {
  const { nodes, materials } = useGLTF('/saturn_hd__textures.glb') as GLTFResult;
  const groupRef = useRef<Group>(null);

  useFrame(({ clock }) => {
    if (groupRef.current) {
      // Rotate 360 degrees every 10 seconds
      groupRef.current.rotation.y = (clock.getElapsedTime() / 10) * Math.PI * 2;
    }
  });

  return (
    <group {...props} dispose={null} ref={groupRef}>
      <group position={[0.124, 0.117, 0.084]} rotation={[-Math.PI / 2, -0.288, -Math.PI / 2]} scale={0.8}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials['Material.001']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials.None}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/saturn_hd__textures.glb');